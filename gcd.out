;author ZZQ
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
declare i32 @printf(i8*, ...)
declare i32 @__isoc99_scanf(i8*, ...)
@a = common global i32 zeroinitializer, align 4
@b = common global i32 zeroinitializer, align 4
define i32 @gcd(i32 %x, i32 %y) {
entry:
%x.addr = alloca i32, align 4
store i32 %x, i32* %x.addr, align 4
%y.addr = alloca i32, align 4
store i32 %y, i32* %y.addr, align 4
%tmp_1 = load i32* %y.addr, align 4
%tmp_0 = icmp eq i32 %tmp_1, 0
br i1 %tmp_0, label %if.then2, label %if.else2

if.then2:
%tmp_3 = load i32* %x.addr, align 4
ret i32 %tmp_3
br label %if.end2

if.else2:
br label %if.end2

if.end2:
%tmp_4 = load i32* %y.addr, align 4
%tmp_6 = load i32* %x.addr, align 4
%tmp_7 = load i32* %y.addr, align 4
%tmp_5 = srem i32 %tmp_6, %tmp_7
%call8 = call i32 @gcd (i32  %tmp_4, i32 %tmp_5)
ret i32 %call8
}
define i32 @main() {
entry:
%call9 = call i32 (i8*, ...)* @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @a)
%call10 = call i32 (i8*, ...)* @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @b)
%tmp_11 = load i32* @a, align 4
%tmp_12 = load i32* @b, align 4
%call13 = call i32 @gcd (i32  %tmp_11, i32 %tmp_12)
%call14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32  %call13)
ret i32 0
}
